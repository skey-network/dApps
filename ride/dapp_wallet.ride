{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let NONE = "none"
let BANNED = "banned" # do we need it?
let ACTIVE = "active"
let CLOSE = "close"
let OPEN = "open"
let deviceActiveKey = "active"
let deviceConnectedKey = "connected"
let assetKey = "asset"
let keyPriceKey = "key_price"
let ownerKey = "owner"
let organizationKey = "org_"
let organizationUserKey = "user_"
let rechargeLimitKey = "recharge_limit"
let dappFatherKey = "dapp_father"
# let actions = [OPEN, CLOSE]
let deviceInitialCounter = 0
#let KEY_DAPP=0 - use issuer
let keyDeviceIndex = 0
let keyValidUntilIndex = 1
let keyVersionIndex = 2
let oneMinute = 60000 # in miliseconds
let version1 = "v1"

let mobileIdWildcard = "*"
let mobileIdUnset = "?"


################ Errors
let EKeyNotOwned = "[E1] Key not owned"
let ENotPermittedByKeyOwner = "[E2] Not permitted by key owner"
let EWrongKeyIssuer = "[E3] Wrong key issuer"
let ENoSuchDevice = "[E4] No such device"
let EKeyNotWhitelisted = "[E5] Key not whitelisted"
let EDeviceNotConnected = "[E6] Device not connected"
let EDeviceNotActive = "[E7] Device not active"
let EKeyExpired = "[E8] Key expired"
let ENotPermittedByOrg = "[E9] Not permitted by organization"
let EMobileIdNotSet = "[E10] Mobile id not set"
let EIdMismatch = "[E11] Id mismatch"
let EOrgNotPermitted = "[E12] Organization not permitted"
let ENotAnOwner = "[E13] Not an owner"
let EWrongPrice = "[E14] Wrong price"
let EWrongPaymentsCount = "[E15] Wrong payments count"
let EWrongPaymentOnlyNative = "[E16] Wrong payment - supported only native token"
let EWrongPaymentValueExpected = "[E17] Wrong payment value, expected "
let EUnknownAssetId = "[E18] Unknown asset id"
let ENotAKey = "[E19] Not a key"
let ENotDeviceKey = "[E20] Not a device key"
let EPriceNotSpecifiedInDev = "[E21] Price not specified in device"
let EOwnerNotSpecifiedInDev = "[E22] Owner not specified in device"

################ utx etc

  func getNumberByKey(key: String) = {
    match getInteger(this,key){
      case a:Int => a
      case _ => 0
    }
  }
  func getStrByKey(key: String) = {
    match getString(this,key){
      case a:String => a
      case _ => NONE
    }
  }
  func getExtNumberByKey(key: String) = {
    match getInteger(this,key){
      case a:Int => a
      case _ => 0
    }
  }
  func getExtStrByKey(addr: Address, key: String) = {
    match getString(addr,key){
      case a:String => a
      case _ => NONE
    }
  }
  func getExtBoolByKey(addr: Address, key: String) = {
    match getBoolean(addr,key){
      case a:Boolean => a
      case _ => false
    }
  }
  func getAssetId()={
    fromBase58String(getStrByKey(assetKey))
  }
################# dapp - user keys/values

  func userStatusKey(addr:String)={
    "user_"+addr
  }

  # values: "none", "active", "banned"
  func userStatusValue(addr:String)={
    match getString(this,userStatusKey(addr)){
      case a:String => a
      case _ => NONE
    }
  }
################# dapp - device keys/values

  func deviceActionKey(addr:String)={
    "device_"+addr
  }
  func deviceActionCounterKey(addr:String)={
    "device_counter_"+addr
  }
  # values: "none", "open", "closed"
  func deviceActionValue(addr:String)={
    getStrByKey(deviceActionKey(addr))
  }
  func deviceActionCounterValue(addr:String)={
    getNumberByKey(deviceActionCounterKey(addr))
  }

################# dapp - device key/nft keys/values
  func nftKey(nft:String)={
    "key_"+nft
  }

  func nftValue(nft:String)={
    getStrByKey(nftKey(nft))
  }

################### returns device if key is whitelisted, otherwise none
  func deviceNotWhitelistedKey(device: Address, key: String)={
    let nftId = nftKey(key)
    let valInDevice = getExtStrByKey(device, nftId)
    valInDevice != ACTIVE
  }


  func deviceFromKey(key: Asset)={
    let device = key.description.split("_")[keyDeviceIndex]
    match (addressFromString(device)){
      case t:Address => t
      case _ => throw(ENotDeviceKey)
    }
  }

   func versionFromKey(key: Asset)={
    key.description.split("_")[keyVersionIndex]
  }

  func getAssetInfo(asset:ByteVector)={
    match (assetInfo(asset)) {
        case t:Asset => t 
        case _ => throw(ENotAKey)
      }
  }

  func keyTimestampInvalid(key:Asset)={
    let timestamp = parseIntValue(key.description.split("_")[keyValidUntilIndex])
    timestamp < lastBlock.timestamp
  }

  func keyPriceFromDevice(device: Address)={
    match(getInteger(device,keyPriceKey)){
      case t:Int => t
      case _ => throw(EPriceNotSpecifiedInDev)
    }
  }

  func ownerFromDevice(device: Address)={
    match(getString(device,ownerKey)){
      case t:String => t
      case _ => throw(EOwnerNotSpecifiedInDev)
    }
  }

  # checks for: 
  # not allowed asset
  # wrong amount
  func priceIsWrong(i:Invocation, assetId:ByteVector, price: Int)={
    if(i.payments.size() < 1) then throw(EWrongPaymentsCount)
    else if(i.payments[0].assetId != unit) then throw(EWrongPaymentOnlyNative)
    else if(i.payments[0].amount != price) then throw(EWrongPaymentValueExpected + toString(price))
    else false
  }


  func getAssetIdFromAttachedPayment(p:AttachedPayment)={
    match(p.assetId){
      case t:ByteVector => t
      case _ => throw(EUnknownAssetId)
    }
  }

  func getAssetInfoFromPayment(i:Invocation)={
    if(i.payments.size() != 1) then throw(EWrongPaymentsCount)
    else {
      let asset = getAssetInfo(getAssetIdFromAttachedPayment(i.payments[0]))
      if(asset.issuer != this) then throw(EWrongKeyIssuer)
      else if(keyTimestampInvalid(asset)) then throw(EKeyExpired)
      else{
        asset
      }
    }
  }

  func rechargeIfNeeded(account:Address)={
    let dappFather = getStrByKey(dappFatherKey)
    invoke(addressFromStringValue(dappFather), "refill", [toBase58String(account.bytes)], [])!=unit 
  }

  func organizationWhitelisted(organization:String)={
    let status = getStrByKey(organizationKey+organization)
    if(status != ACTIVE)then throw(EOrgNotPermitted) else true
  }

  func whitelistedByOrganization(org:Address, caller:String, mobileId:String)={
    let definedMobileId = getExtStrByKey(org,organizationUserKey+caller)
    if(definedMobileId == NONE)then throw(ENotPermittedByOrg)
    else if(definedMobileId == mobileIdUnset) then throw(EMobileIdNotSet)
    else if(definedMobileId == mobileIdWildcard) then true
    else if(definedMobileId != mobileId) then throw(EIdMismatch)#+definedMobileId+" "+mobileId)
    else true
  }


################# utx - checks
  
  # checks if action is on predefined list
  # func notAllowedDeviceAction(action:String)={
  #   match (actions.indexOf(action)){
  #     case a:Int => false
  #     case _ => true
  #   }
  # }
################ public functions

### open device func
func deviceActionWithKey(i: Invocation, keyID: String, action: String) = {
  let keyInfo = getAssetInfo(fromBase58String(keyID))
  let device = deviceFromKey(keyInfo)
  # let keyVersion = versionFromKey(keyInfo)
  let deviceStr = toBase58String(device.bytes)
  let recharge = getExtNumberByKey(rechargeLimitKey)



  if(keyInfo.issuer != this) then throw(EWrongKeyIssuer)
  # else if(keyVersion != version1) then throw("Wrong key version")
  else if(deviceActionKey(deviceStr)==NONE) then throw(ENoSuchDevice)
  else if(deviceNotWhitelistedKey(device, keyID)) then throw(EKeyNotWhitelisted)
  else if(!getExtBoolByKey(device, deviceConnectedKey))then throw(EDeviceNotConnected)
  else if(!getExtBoolByKey(device, deviceActiveKey))then throw(EDeviceNotActive)
  # else if(notAllowedDeviceAction(action)) then throw("Action is not allowed")
  else if(keyTimestampInvalid(keyInfo)) then throw(EKeyExpired)
  else {
    let changes = [
      StringEntry(deviceActionKey(deviceStr), action),
      IntegerEntry(deviceActionCounterKey(deviceStr), deviceActionCounterValue(deviceStr) + 1)
    ] 
    (changes, rechargeIfNeeded(i.caller))
  }
}

###
#
# Updates device entries:
# - device_{address}: action      # action to be made
# - device_counter_{address} +1   # counter incremented with each action, change detected by oracle
#
@Callable(i)
func deviceActionAs(keyID: String, action: String, keyOwner: String, mobileId:String) = {
  let keyOwnerAddress = addressFromStringValue(keyOwner)
  let hasNoKey = assetBalance(keyOwnerAddress, fromBase58String(keyID)) < 1 # organisation has no key
  let allowedByKeyOwner = organizationWhitelisted(keyOwner) && whitelistedByOrganization(keyOwnerAddress, toBase58String(i.caller.bytes), mobileId)

  if (hasNoKey) then throw(EKeyNotOwned)
  else if(!allowedByKeyOwner) then throw(ENotPermittedByKeyOwner)
  else deviceActionWithKey(i,keyID, action) 
}

###
#
# Updates device entries:
# - device_{address}: action      # action to be made
# - device_counter_{address} +1   # counter incremented with each action, change detected by oracle
#
@Callable(i)
func deviceAction(keyID: String, action: String) = {
  let keyOwnerAddress = i.caller
  let hasNoKey = assetBalance(keyOwnerAddress, fromBase58String(keyID)) < 1
  
  if (hasNoKey) then throw(EKeyNotOwned)
  else deviceActionWithKey(i,keyID, action) 
}

###
#
# Sends key and refils (as needed) account of sender and recipient
#
@Callable(i)
func transferKey(recipient: String) ={
  let keyInfo = getAssetInfoFromPayment(i) # throws errors when wrong issuer or key is expired
  let recipientAddr = addressFromStringValue(recipient)
  let transfer = ScriptTransfer(recipientAddr,1,keyInfo.id)::[]
  (transfer, rechargeIfNeeded(recipientAddr) && rechargeIfNeeded(i.caller)) # transfer and recharge if needed
}

@Callable(i)
func requestKey(deviceAddr: String, duration: Int) = {
  let issuedAt=lastBlock.timestamp
  let validUntil=issuedAt + duration * oneMinute
  let deviceOwner = ownerFromDevice(addressFromStringValue(deviceAddr))
  let keyPriceConstant = keyPriceFromDevice(addressFromStringValue(deviceAddr)) # throws if no price is specified
  let keyPrice = keyPriceConstant * duration
  let assetId = getAssetId()

  if(toBase58String(i.caller.bytes)!=deviceOwner)then throw(ENotAnOwner)
  else if(deviceActionKey(deviceAddr)==NONE) then throw(ENoSuchDevice)
  else if(priceIsWrong(i,assetId,keyPrice))then throw(EWrongPrice)
  else{
    let issue = Issue("SmartKey",deviceAddr+"_"+validUntil.toString()+"_"+version1,1,0,false) # timestamp of issue is in token details
    let newAssetId = calculateAssetId(issue)
    ([
      issue,
      ScriptTransfer(i.caller,1,newAssetId)
    ], rechargeIfNeeded(i.caller))
  } 
}
