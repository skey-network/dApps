{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let NONE = "none"
let ACTIVE = "active"
let INACTIVE = "inactive"
let supplierKey = "supplier"
let ownerKey = "owner"
let keyDevice = 0

let mobileIdWildcard = "*"
let mobileIdUnset = "?"


################ errors

let ENotAKey = "[E201] Not a key"
let EWrongPaymentsCount = "[E202] Wrong payments count"
let EWrongAsset = "[E203] Wrong asset"
let ENotDeviceKey = "[E204] Not a device key"
let ENotOwnerAddress = "[E205] Not an owner address"
let ENoOwnerInDevice = "[E206] Owner not specified in device"
let EForbiddenIdStr = "[E207] Forbidden id string"
let EActivationTokenInactive = "[E208] Activation failed, token is inactive"
let ENotPermitted = "[E209] Not permitted"
let ENotAMember = "[E210] Not a member"
let ENoExistingIdChange = "[E211] Cant change existing id"

################ utx etc

  func getNumberByKey(key: String) = {
    match getInteger(this,key){
      case a:Int => a
      case _ => 0
    }
  }
  func getStrByKey(key: String) = {
    match getString(this,key){
      case a:String => a
      case _ => NONE
    }
  }
  func getExtNumberByKey(key: String) = {
    match getInteger(this,key){
      case a:Int => a
      case _ => 0
    }
  }
  func getExtStrByKey(addr: Address, key: String) = {
    match getString(addr,key){
      case a:String => a
      case _ => NONE
    }
  }

  func userKeyFromAddr(addr: Address) = {
    "user_" + toBase58String(addr.bytes)
  }

  func tokenKeyFromAssetId(assetId:ByteVector) = {
    "token_" + toBase58String(assetId)
  }

################  token

  func getTokenInfo(asset:ByteVector) = {
    match (assetInfo(asset)) {
        case t:Asset => t 
        case _ => throw(ENotAKey)
      }
  }

  func getPaymentSingleToken(payments: List[AttachedPayment])={
    if(payments.size() != 1 ) then throw(EWrongPaymentsCount)
    else {
      match (payments[0].assetId) {
          case t:ByteVector => getTokenInfo(t)
          case _ => throw(EWrongAsset)
        }
    }
  }

  func checkTokenActive(token:ByteVector)={
    getStrByKey(tokenKeyFromAssetId(token)) == ACTIVE
  }
  
  func deviceFromKey(key: Asset)={
    let device = key.description.split("_")[keyDevice]
    match (addressFromString(device)){
      case t:Address => t
      case _ => throw(ENotDeviceKey)
    }
  }
  
  func ownerFromDevice(device: Address)={
    match(getString(device,ownerKey)){
      case t:String => {
        match (addressFromString(t)){
          case x:Address => x
          case _ => throw(ENotOwnerAddress)
        }
      }
      case _ => throw(ENoOwnerInDevice)
    }
  }

  func getOwnerFromKey(asset:Asset)={
    let device = deviceFromKey(asset)
    ownerFromDevice(device)
  }


################ mobileid
  func incorrectMobileId(mid:String)={
    if(mid==mobileIdUnset)then true
    else if(mid==mobileIdWildcard)then true
    else if(mid.size()==0)then true
    else false
  }


################ public functions

@Verifier(tx)
func verify() = {
    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
}

@Callable(i)
func activate(id:String) = {
  # what about id length
  
  let token = getPaymentSingleToken(i.payments)
  if(incorrectMobileId(id))then throw(EForbiddenIdStr)
  else if(checkTokenActive(token.id)) then {
    [
      StringEntry(userKeyFromAddr(i.caller), id)
    ]
  } else throw(EActivationTokenInactive)
}

@Callable(i)
func removeKey(key:String) = {
  let token = fromBase58String(key)
  let tokenInfo = getTokenInfo(token)
  let devOwner = getOwnerFromKey(tokenInfo)
  if(tokenInfo.issuer!=i.caller && devOwner !=i.caller)then throw(ENotPermitted)
  else{
    [Burn(token,1)]
  }
}

@Callable(i)
func setMobileId(id:String)={
  # if unset && active member set
  # else error
  let actual = userKeyFromAddr(i.caller)
  if(actual==NONE)then throw(ENotAMember)
  else if(incorrectMobileId(id))then throw(EForbiddenIdStr)
  else if(userKeyFromAddr(i.caller)!=mobileIdUnset)then throw(ENoExistingIdChange)
  else{
    [StringEntry(userKeyFromAddr(i.caller),id)]
  }
}