{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let NONE = "none"
let ACTIVE = "active"
let INACTIVE = "inactive"
let supplierKey = "supplier"
let ownerKey = "owner"
let updaterPKKey = "updater_public_key"

################ utx etc

  func getNumberByKey(key: String) = {
    match getInteger(this,key){
      case a:Int => a
      case _ => 0
    }
  }
  func getStrByKey(key: String) = {
    match getString(this,key){
      case a:String => a
      case _ => NONE
    }
  }
  func getExtNumberByKey(key: String) = {
    match getInteger(this,key){
      case a:Int => a
      case _ => 0
    }
  }
  func getExtStrByKey(addr: Address, key: String) = {
    match getString(addr,key){
      case a:String => a
      case _ => NONE
    }
  }
################# supplier - user keys/values


################# supplier - device key/nft keys/values
  func nftKey(nft:String)={
    "key_"+nft
  }

  func nftValue(nft:String)={
    getStrByKey(nftKey(nft))
  }



  # # checks for:
  # # not an owner of device
  # func notAnOwner(user:String, deviceAddr:String)={ 
  #   let ownerAddress = getDeviceOwnerAddressValue(addressFromStringValue(deviceAddr))
  #   if (ownerAddress != user) then throw("not an owner")
  #   else false
  # }

  func getAssetInfo(asset:ByteVector)={
    match (assetInfo(asset)) {
        case t:Asset => t 
        case _ => throw("Not a key")
      }
  }

  
  func updData(acu:List[StringEntry|IntegerEntry|DeleteEntry|BooleanEntry],item:String)={
    let expl = item.split("#")
    if(expl[0]=="set") then {
      if(expl[1]=="bool") then {
        BooleanEntry(expl[2],(expl[3]=="true"))::acu
      }else if(expl[1]=="string") then {
        StringEntry(expl[2],expl[3])::acu
      }else{  #if(expl[1]=="int") then {
        IntegerEntry(expl[2],parseIntValue(expl[3]))::acu
      }
    }else{
      DeleteEntry(expl[1])::acu
    }
  }

  func addKeys(acu:List[StringEntry],item:String)={
    StringEntry("key_"+item,ACTIVE)::acu
  }

################ public functions

@Verifier(tx)
func verify() = {
    let updaterPK =getStrByKey(updaterPKKey)
    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) || (updaterPK!=NONE && sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(updaterPK)))
}


###
#
# Write key entry:
# - key_{token_id}: "{device_address}"
#
@Callable(i)
func addKey(keyID: String) = {
  let callerAddress = toBase58String(i.caller.bytes)
  let keyInfo = getAssetInfo( fromBase58String(keyID))
  let supplierAddr = addressFromStringValue(getStrByKey(supplierKey))
  let ownerAddr = addressFromStringValue(getStrByKey(ownerKey))

  # let keyIsNotNft = match assetInfo(fromBase58String(keyID)) {
  #   case asset:Asset =>
  #       asset.decimals != 0 || asset.reissuable == true || asset.quantity != 1
  #   case _ => true
  # }


  # TODO check device in key (will not work with open when there is another dev addr)
  if(keyInfo.issuer!=supplierAddr)then throw("Wrong key issuer") # accepted only keys issued by supplier
  else if ((ownerAddr!=i.caller) && (supplierAddr!=i.caller)) then throw("Not permitted") # only supplier can add key
  else if (nftValue(keyID) == INACTIVE && supplierAddr!=i.caller) then throw("This key is banned")
  else if (nftValue(keyID) == ACTIVE) then throw("This key is already assigned")
  #else if (assetBalance(i.caller, fromBase58String(keyID)) < 1) then throw("key is not present in user wallet")
  else{
    [
     StringEntry(nftKey(keyID), ACTIVE)
    ]
  }
}

###
# 
# Remove key entry
# - key_{token_id}
#
@Callable(i)
func removeKey(keyID: String) = {
  let supplierAddr = addressFromStringValue(getStrByKey(supplierKey))
  let ownerAddr = addressFromStringValue(getStrByKey(ownerKey))
  if(supplierAddr==i.caller) then {                 # supplier bans key
     [StringEntry(nftKey(keyID),INACTIVE)]
  } else if (ownerAddr==i.caller) then {        # user can remove not banned key
     let keyStatus = getStrByKey(nftKey(keyID))
     if(keyStatus == "active") then {           
      [DeleteEntry(nftKey(keyID))] # remove key from data
     } else {
       throw("Not permitted")
     }
  } else throw("Not permitted")
}

###
#
# Updates data in device (max 15 entries at time) by item schema: 
# action#type#key#value
# actions: set/delete
# type: string,int,bool
# key: key for data entry
# value: value for entry (ignored for delete)
@Callable(i)
func updateData(args:List[String])={
  let supplierAddr = addressFromStringValue(getStrByKey(supplierKey))
  if(supplierAddr != i.caller)then throw("Not permitted")
  else FOLD<15>(args, [], updData)
}

###
#
# Adds many keys (max 80 keys at time) by id as string: 
@Callable(i)
func addManyKeys(args:List[String])={
  let supplierAddr = addressFromStringValue(getStrByKey(supplierKey))
  if(supplierAddr != i.caller)then throw("Not permitted")
  else FOLD<80>(args, [], addKeys)
}
